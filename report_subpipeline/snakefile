# This subpipeline checks if the void report flag (.asscom2_void_report.flag) file has been modified by a rule in the parent pipeline. If so, the report will be rendered.


out_base = config['out_base']
base_variable = config['base_variable']
batch_title = config['batch_title']


print('report subpipeline: out_base:', out_base)
print('report subpipeline: base_variable:', base_variable)


rule all:
	input: expand("{out_base}/report.html", out_base = out_base)


# Runs locally, because why not.
# Should only run if {out_base}/output_asscom2 is newer (modified) than the report
rule report:
	input: "{out_base}/output_asscom2/.asscom2_void_report.flag" # Means that rule report will only run when outputs from parent pipeline has changed.
	conda: f"{base_variable}/conda_envs/r-markdown.yaml"
	output: "{out_base}/report.html"
	shell: """

		echo "report subpipeline: initializing report ..."
		
		# Dummy code for rendering the report
		touch {output} 
		ls {out_base} > {output}


		echo "report subpipeline: report written to {output}"
		echo "    ______________________________  "
		echo "   < The report has been rendered > "
		echo "    ------------------------------  "
		echo "           \\   ^__^                "
		echo "            \\  (oo)\\_______        "
		echo "               (__)\\       )\\/\\    "
		echo "                   ||----w |        "
		echo "                   ||     ||        "

	"""




# Note: The stderr/out from rule report should not be shown on screen as it problematically wipes possible interesting fail-outputs from the main asscom2 pipeline.