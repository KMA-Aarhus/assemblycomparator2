# This subpipeline checks if the void report flag (.asscom2_void_report.flag) file has been modified by a rule in the parent pipeline. If so, the report will be rendered.


out_base = config['out_base']
base_variable = config['base_variable']
batch_title = config['batch_title']


print('report subpipeline: out_base:', out_base)
print('report subpipeline: base_variable:', base_variable)


rule all:
	input: expand("{out_base}/report_{batch_title}.html", out_base = out_base, batch_title = batch_title)


# Runs locally, because why not.
# Should only run if {out_base} is newer (modified) than the report
rule report:
	input: "{out_base}/.asscom2_void_report.flag" # Means that rule report will only run when outputs from parent pipeline has changed.
	conda: f"{base_variable}/conda_envs/r-markdown.yaml"
	output: "{out_base}/report_{batch_title}.html"
	shell: """

		echo "report subpipeline: initializing report ..."
	
		cd output_asscom2
		cp {base_variable}/scripts/genomes_to_report_v2.Rmd rmarkdown_template.rmd
		ls
		Rscript -e 'getwd(); rmarkdown::render("rmarkdown_template.rmd", "html_document")' 

		mv rmarkdown_template.html report_{batch_title}.html
		ls
		rm rmarkdown_template.rmd


		echo "report subpipeline: report written to {output}"
		echo "    ______________________________  "
		echo "   < The report has been rendered > "
		echo "    ------------------------------  "
		echo "           \\   ^__^                "
		echo "            \\  (oo)\\_______        "
		echo "               (__)\\       )\\/\\    "
		echo "                   ||----w |        "
		echo "                   ||     ||        "

	"""


# rule report:
#     input:
#         roary = "{out_base}/roary/roary_done.flag", # fasttree depends on roary, so the roary dependency is not necessary.
#         fasttree = "{out_base}/fasttree/fasttree.newick", 
#         snp_dists = "{out_base}/snp-dists/snp-dists.tsv",
#         rmarkdown_template = "{out_base}/rmarkdown_template.rmd"
#     #output: "{out_base}/report.html"
#     output: "{out_base}/report_{batch_title}.html"
#     params:
#         #markdown_template_rmd = "rmarkdown_template.rmd", # "genomes_to_report_v2.Rmd"
#         markdown_template_html = "genomes_to_report_v2.html"
#     container: "docker://cmkobel/assemblycomparator2_report"
#     conda: "conda_envs/r-markdown.yaml"
#     shell: """

#         cd {wildcards.out_base}



#         Rscript -e 'library(rmarkdown); rmarkdown::render("rmarkdown_template.rmd", "html_document")'

#         rm rmarkdown_template.rmd
#         mv rmarkdown_template.html ../{output}
        
#     """





# Note: The stderr/out from rule report should not be shown on screen as it problematically wipes possible interesting fail-outputs from the main asscom2 pipeline.