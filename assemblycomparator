#!/usr/bin/env bash


# installation:
# 1: install conda
# 2: install the environment used (cmkobel/compare)

# todo: exit when errors happen in subparts (i.e. gwf, when a target has an error.)
# todo: take better care of 'wrong' symbols in the input files


red=`tput setaf 1`
green=`tput setaf 2`
orange=`tput setaf 3`
blue=`tput setaf 4`
purple=`tput setaf 5`
lblue=`tput setaf 6`
white=`tput setaf 7`

bold=$(tput bold)
reset=`tput sgr0`


# Extract the email-address of the user from the GenomeDK finger registry:
#export COMPARATOR_EMAIL=$(finger `echo $USER` | grep -o -E "<.+@.+\..+>" | tr -d "<" | tr -d ">")

export COMPARATOR_DEFAULT_EMAIL_ADDRESS=$(finger `echo $USER` | grep -o -E "<.+@.+\..+>" | tr -d "<" | tr -d ">")



#echo "${white}$COMPARATOR_DEFAULT_EMAIL_ADDRESS"
echo
echo  "${red}┌─┐┌─┐┌─┐┌─┐┌┬┐┌┐ ┬ ┬ ┬  ┌─┐┌─┐┌┬┐┌─┐┌─┐┬─┐┌─┐┌┬┐┌─┐┬─┐${purple}KMA"
echo "${green}├─┤└─┐└─┐├┤ │││├┴┐│ └┬┘  │  │ ││││├─┘├─┤├┬┘├─┤ │ │ │├┬┘"
echo "${blue}┴ ┴└─┘└─┘└─┘┴ ┴└─┘┴─┘┴   └─┘└─┘┴ ┴┴  ┴ ┴┴└─┴ ┴ ┴ └─┘┴└─${reset}"
echo 
TARGET_DIR='/project/ClinicalMicrobio/faststorage/compare'
curr_dir_name=${PWD##*/}          # to assign to a variable


# parse --blastp for blastp-identity
if [ "$1" = "--blastp" ]; then
    if [ "$2" -eq "$2" ] && [ "$2" -lt 101 ]; then
        BLASTP=${2%.*}
        echo -e "${orange}Info:${reset} The blastp-identity threshold has been set to ${bold}$BLASTP${reset}"
        if [ "$2" -lt 69 ]; then
            echo -e "${red}Warning:${reset} Setting the threshold below 70 is not recommended."
        fi
    else
        echo -e "\n${red}Error:${reset} the parameter given after --blastp must be a number between 70 and 100.\nExample:\n\n\tassemblycomparator --blastp 90\n\n"; exit 1
    fi
else
    BLASTP=95
    echo -e "Info: The blastp-identity threshold is set to $BLASTP (default).\n\t${white}(can be changed with the --blastp argument)${reset}"
fi


export BLASTP




#echo "This is the KMA assembly comparison program"



#Todo: make a test, that tests the complete pipeline. Travis-like


# remember to install miniconda
# TODO: In the long run, it might be nice to use a shared conda environment, between users.
# Todo: offer to fix filenames containing weird characters (interactively, maybe)




#echo "testing dependencies..."
#todo test the environment from conda against a list of expected

echo
echo "These are the ${bold}`ls -1 | wc -l`${reset} assemblies considered for project ${bold}$curr_dir_name${reset}:"
#ls -1
#todo, fix problem with spaces in filenames
for f in *; do echo " $f"; done
echo


#[ -d "$TARGET_DIR/output/$curr_dir_name" ] && echo -e "${purple}Attention:${reset} This folder already exists in the output directory. Proceed only if the contents are comparable.\n"

read -p "Do you wish to proceed? [y/n] " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "${orange}user left${reset}"
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi
echo " proceeding..."
echo " activating environment..." 
#source ~/miniconda3/etc/profile.d/conda.sh
# todo: use the COMPARATOR_CONDA_ENV global instead of hardcoding. Make sure it is installed at NNLs user

source /faststorage/project/ClinicalMicrobio/compare/environment/etc/profile.d/conda.sh
conda activate comparator 

#conda activate /faststorage/project/ClinicalMicrobio/compare/environment



# Todo: run in parallel
printf " validating assembly files   "
i=1
sp="/-\|"
for f in *; do printf "\b\b\b ${sp:i++%${#sp}:1} "; any2fasta -q "$f" > /dev/null || { echo -e "  file: ${bold}$f${reset}\n${red}error in any2fasta. ${reset} exiting." && exit 1; }; done
#ls * | parallel 'any2fasta -q {} >/dev/null || printf "\n${red}Error${reset}: {} is not a valid assembly file: "; exit 1; return 1' #|| { echo "${red}error in any2fasta. ${reset} exiting." && exit 1; }
#ls * | parallel 'hay="{}" && any2fasta -q {} >/dev/null 2>ac_a2ferr.txt' && echo YES || { echo "$hay ${red}error in any2fasta. ${reset} exiting." && exit 1; }

printf "\b\b\b..."

echo



# Throw out the user if they are trying to run from the compare/input/ directory
inode_pwd=$(ls -id "$(pwd)/../" | grep -oE "[0-9]+ ")
inode_input=$(ls -id "$TARGET_DIR/input/" | grep -oE "[0-9]+ ")
#echo $inode_pwd
#echo $inode_input
if [ $inode_pwd == $inode_input ]; then
    echo "${red}Error: ${reset} Running assemblycomparator from the input directory is not supported. Exiting." && exit 1
fi


[ -d "$TARGET_DIR/output/$curr_dir_name" ] &&  echo " backing up old content..." && mv "$TARGET_DIR/input/$curr_dir_name" "$TARGET_DIR/old/$(date +%Y%m%d_%H%M%S)_$curr_dir_name"

echo " archiving content..."
cp -r "../$curr_dir_name" "$TARGET_DIR/input/" &
echo 




# if an output dir with the same name already exists in compare/input, then move it away.
echo "These are the jobs:"
gwf -b slurm -f /project/ClinicalMicrobio/faststorage/compare/workflow.py status --status running --status submitted --status shouldrun || { echo "${red}error in gwf. ${reset}exiting." && exit 1; }


        

# prompt the user.
echo ""
read -p "Do you wish to submit this job list? [y/n] " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # If the user agrees, run the workflow
    echo " submitting jobs..."
    echo
    gwf -b slurm -f /project/ClinicalMicrobio/faststorage/compare/workflow.py run || { echo "${red}error in gwf. ${reset}exiting." && exit 1; }
    
    echo "The job list has been submitted."
    echo
    echo "When the pipeline is done, the output will reside in:"
    echo "    /project/ClinicalMicrobio/faststorage/compare/output/$curr_dir_name"
    echo "and an email will be sent to:"
    echo "    $COMPARATOR_DEFAULT_EMAIL_ADDRESS"
    echo
    echo "Please check the status of the pipeline by running the following command:"
    echo "    mj"
    mj
else
    echo "${orange}user left${reset}"

fi



